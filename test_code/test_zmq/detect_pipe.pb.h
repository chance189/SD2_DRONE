// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detect_pipe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_detect_5fpipe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_detect_5fpipe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_detect_5fpipe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_detect_5fpipe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_detect_5fpipe_2eproto;
namespace SD1 {
class DETECTION;
class DETECTIONDefaultTypeInternal;
extern DETECTIONDefaultTypeInternal _DETECTION_default_instance_;
}  // namespace SD1
PROTOBUF_NAMESPACE_OPEN
template<> ::SD1::DETECTION* Arena::CreateMaybeMessage<::SD1::DETECTION>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SD1 {

// ===================================================================

class DETECTION :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SD1.DETECTION) */ {
 public:
  DETECTION();
  virtual ~DETECTION();

  DETECTION(const DETECTION& from);
  DETECTION(DETECTION&& from) noexcept
    : DETECTION() {
    *this = ::std::move(from);
  }

  inline DETECTION& operator=(const DETECTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline DETECTION& operator=(DETECTION&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DETECTION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DETECTION* internal_default_instance() {
    return reinterpret_cast<const DETECTION*>(
               &_DETECTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DETECTION& a, DETECTION& b) {
    a.Swap(&b);
  }
  inline void Swap(DETECTION* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DETECTION* New() const final {
    return CreateMaybeMessage<DETECTION>(nullptr);
  }

  DETECTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DETECTION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DETECTION& from);
  void MergeFrom(const DETECTION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DETECTION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SD1.DETECTION";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_detect_5fpipe_2eproto);
    return ::descriptor_table_detect_5fpipe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // string label = 5;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 3;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 4;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // @@protoc_insertion_point(class_scope:SD1.DETECTION)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  float x_;
  float y_;
  float w_;
  float h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_detect_5fpipe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DETECTION

// float x = 1;
inline void DETECTION::clear_x() {
  x_ = 0;
}
inline float DETECTION::_internal_x() const {
  return x_;
}
inline float DETECTION::x() const {
  // @@protoc_insertion_point(field_get:SD1.DETECTION.x)
  return _internal_x();
}
inline void DETECTION::_internal_set_x(float value) {
  
  x_ = value;
}
inline void DETECTION::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SD1.DETECTION.x)
}

// float y = 2;
inline void DETECTION::clear_y() {
  y_ = 0;
}
inline float DETECTION::_internal_y() const {
  return y_;
}
inline float DETECTION::y() const {
  // @@protoc_insertion_point(field_get:SD1.DETECTION.y)
  return _internal_y();
}
inline void DETECTION::_internal_set_y(float value) {
  
  y_ = value;
}
inline void DETECTION::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SD1.DETECTION.y)
}

// float w = 3;
inline void DETECTION::clear_w() {
  w_ = 0;
}
inline float DETECTION::_internal_w() const {
  return w_;
}
inline float DETECTION::w() const {
  // @@protoc_insertion_point(field_get:SD1.DETECTION.w)
  return _internal_w();
}
inline void DETECTION::_internal_set_w(float value) {
  
  w_ = value;
}
inline void DETECTION::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:SD1.DETECTION.w)
}

// float h = 4;
inline void DETECTION::clear_h() {
  h_ = 0;
}
inline float DETECTION::_internal_h() const {
  return h_;
}
inline float DETECTION::h() const {
  // @@protoc_insertion_point(field_get:SD1.DETECTION.h)
  return _internal_h();
}
inline void DETECTION::_internal_set_h(float value) {
  
  h_ = value;
}
inline void DETECTION::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:SD1.DETECTION.h)
}

// string label = 5;
inline void DETECTION::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DETECTION::label() const {
  // @@protoc_insertion_point(field_get:SD1.DETECTION.label)
  return _internal_label();
}
inline void DETECTION::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:SD1.DETECTION.label)
}
inline std::string* DETECTION::mutable_label() {
  // @@protoc_insertion_point(field_mutable:SD1.DETECTION.label)
  return _internal_mutable_label();
}
inline const std::string& DETECTION::_internal_label() const {
  return label_.GetNoArena();
}
inline void DETECTION::_internal_set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DETECTION::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SD1.DETECTION.label)
}
inline void DETECTION::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SD1.DETECTION.label)
}
inline void DETECTION::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SD1.DETECTION.label)
}
inline std::string* DETECTION::_internal_mutable_label() {
  
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DETECTION::release_label() {
  // @@protoc_insertion_point(field_release:SD1.DETECTION.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DETECTION::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:SD1.DETECTION.label)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SD1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_detect_5fpipe_2eproto
